13-0 Compile, execute, and test the programs in this chapter
    
    A:  see Core.h, Core_help.h, main_Stu.cpp, main.cpp

13-1 Annotate the Core and Grad constructors to write the constructor's name and argument list when the constructor is executed.
    
    A:  see Core.h - Added cerr output for Core and Grad constructors.  Use cerr because we want the output to be flushed immediately. any output sent to these stream objects is immediately flushed to the OS -  any output operation on std::cerr first executes std::cout.flush().  Also made it apparent that the main_Stu program constructs an unused Grad object after end-of-file.

13-2 Given the Core and Grad classes defined in this chapter, indicate which function is called for each of these invocations:
Core* p1 = new Core; // Core() default constructor
Core* p2 = new Grad; // Grad() default constructor
Core s1; // Core Default constructor
Grad s2; // Core default contructor and Grad default constructor
p1->grade(); // Core::grade()
p1->name(); // Core::name()
p2->grade(); // Grad::grade()
p2->name(); // Core::name()
s1.grade(); // Core::grade()
s1.name();  // Core::name()
s2.name();  // Core::name()
s2.grade();. // Grad::name()
    Check whether you are correct by adding output statements to the name and grade functions that indicate which function is being executed
    
    A:  see above.  the name function is inherited by Grad from Core so there's only one function necessary.  The grade() function is redefined for the Grad class so it gets called for that namespace. see 13-2 for implementation. added cerr output to grade() and name() functions. Also edited the grade function in Core_help.h to accept vectors of size 0, and gives the student a 0 for the HW grade.
    
13-3. The class that we built in Chapter 9 included a valid member that allowed users to check whether the object held values for a student record or not. Add that functionality to the inheritance-based system of classes.

    A:  added valid() function to Core class, should be inherited by the Grad class.  checks if the homework vector is empty.
    
13-4. Add to these classes a function that will map a numeric grade to a letter grade according to the grading policy outlined in ยง10.3/177

    A:  utilized the letter_grade_array program from chapter 10, which I don't think I wrote. added a member function to the Core class to call letter_grade_array::letter_grade().  see Core.h -- needed to add function to handle class as well.  Grad class inherited it.

13-5. Write a predicate to check whether a particular student met all the relevant requirements. That is, check whether a student did all the homework, and if a graduate student, whether the student wrote a thesis

    A:  added virtual has_thesis() function to core and redefined in Grad.  requirements() function in Student_info checks these new member functions and the Core::valid() function to return a bool.
    
13-6. Add a class to the system to represent students taking the course for pass/fail credit. Assume that such students need not do the homework, but might do so. If they do, the homework should participate in determining whether they passed or failed, according to the normal formula. If they did no homework, then the grade is the average of their midterm and final grades. A passing grade is 60 or higher.

    A:  added Auditor class - derived from Core. had to redefine grade and read() and constructors - it's not great but it works.  modified Student_info::read to accomodate the new class.
    
13-7. Add a class to the system to represent students auditing the course
    
    A:  I'm not doing this.  redefine the read to only take a name and set the grade to 0.
    
13-8. Write a program to generate a grade report that can handle all four kinds of students

    A: see main_Stu.cpp
    
13-9. Describe what would happen if the assignment operator in ยง13.4.2/247 failed to check for self-assignment

    A:  it woul delete itself and return a segmentation fault becasue the memory it's looking for is no longer there.  
    
