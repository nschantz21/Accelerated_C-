Chapter 15: Revisiting character pictures
    this is going to deal a lot with inheritance and our genric Handle class

15.1 Design

    the Character Picture programs have two problems. The design doesn't have any structural info about how the pic was made.  The vector<string> implementation makes too many copies.  We'll use the Ptr class for implementation and reduce copies.  Design: we want to differentiate between frame, vcat, and hcat functions.

15.1.1 Using inheritance to model the structure

    because these picture objects are similar, but different, we want to use inheritance.  We can define a common base class that models the common properties of every kind of picture, and then derive from that base class a separate class for each specific kind of picture that we want to support.
    By relating classes through inheritance, we can use virtual functions to write code that doesn't always need to know the precise kind of picture on which it is operating.
    We don't need to make the inheritance visible to user because the operations do not deal with specific kinds of classes.
    So we need three types of classes: the interface class, the base class, and the derived classes
    Since we want to rely on the Ptr class to handle all the memory, and we want to hide our base/derived classes behind an interface class, we will use protection mechanisms.  By giving these classes an empty public interface, we can let the compiler enforce our decision that all interactions with our pictures will be through the interaction class.
    If the object classes do not affect the state of the implementation class, then there's no reason to make their operations members of the implementation class. in fact we should not, because as nonmemebers they can allow conversions.
    Remember that conversions are not applied to the left operand of the class::operator.()

15.1.2 The Pic_base class

    We need to implement a virtual function in the base class that may affect a derived class, such as an output operator. in the base class, typedef the underlying objects attributes if you need them, such as size_type.  Setting the virtual functions to 0, we are saying there will be no other definition of these virtual functions.  We do this because the base class is never acted upon and thus never needs to have values.  
    Instead of forcing us to concoct an arbitrary definition for these operations, the C++ language lets us say that there will be no definition for a given virtual function.  As a side effect of declining to implement the virtual function, we also promise that there will never be objects of the associated type. There may still be objects of types derived from this type, but there are no objects of its exact type.
    The way that we specify that we don't intend to implement a virtual function is to say = 0. Doing so makes it a pure virtual function. By giving a class even a single pure virtual function, we are also implicitly specifying that there will never be objects of that class. Such classes are called abstract base classes, because they exist only to capture an abstract interface for an inheritance hierarchy. They are purely abstract: There are no objects of the base class itself. Once we give a class any pure virtual s, the compiler will enforce our design by preventing us from creating any objects of an abstract class.

15.1.3 The derived classes

    the fact that a function is a pure virtual is inherited. If a derived class defines all of its inherited pure virtual functions, it becomes a concrete class, and we can create objects of that class.  
    We are going to store a pointer to the base class in the interface class.  The derived classes are going to store interface class objects, but pretty much only for the base class pointer.  This way we can act upon/store interface class with our derived classes without reimplementing the base calss functions in the interface class.

15.1.4 Copy control

    we didn't make any copy constructors, assignment oerators, or destructors because the synthesized versions work.  Because we implemented everything using a Ptr or vector class, those classes' members will take care of the constructors, assignment, and destructors.

15.2 Implementation

    the interface class makes the derived classes using the Base class (which is stored as a pointer in the interface class). If the derived class constructor is private (which all of ours are), then you have to add the interface class to the derived as a friend.
    Because our constructor functions have the interface object as the parameter, we need to define an interface object constructor that takes a base object pointer as an argument.  That way we can pass the interface class pointers to the derived as well.
    
15.2.2 The String_Pic class

    added the width and display functions to the class header.
    
15.2.3 Padding the output

    functions used by all derived classes can be defined in the the Base protected section.
    Even if the Base is abstract, each derived contains a base-class part. A base-class function will execute on the base-class portion of a derived object.  Abstract classes may define data members, and (ordinary) member functions, as well as static ones.
    By making a class function a static member, we allow for the fact that other abstractions in our program might have utilize a similar function, both in name and concept.  As long as each class defines what the static function means only in the context of the class, these mutually independent notions can coexist within our program.
    
15.2.4 The VCat_Pic class

    implement the class
    
15.2.5 The HCat_Pic class

    nothing to add

15.2.6 The Frame_Pic class

    nothing to add
    
15.2.7 Don't forget friends

    A member of a Derived classes can access protected members of the base-class parts of objects of its own class, or of its own class, or of other classes derived from it (second generation), but it cannot access the protected members of base-class objects that stand alone- that is, that are not part of a derived-class object.
    This is important when using dynamic binding and virtual functions because to the compiler, the pointers, through which we are accessing all the info, are for base-class objects.  Therefore they appear to be stand-alone base-class objects and the derived class objects will not be able to access their protected members.
    If the language granted derived objects access to the protected members of a base-class object, then it would be trivial to subvert the protection mechanisms. If we needed access to a protected member of a class, we could define a new class that inherited from the class that we wanted to access. Then we could define the operation that needed access to the protected member as a member of that newly derived class. By doing so, we could override the original class designer's protection strategy. For this reason, protected access is restricted to members of the base-class part of a derived-class object, and does not allow direct access to the members of base-class objects.
    
Details:
    
    You can circumvent mutual dependencies by using pointers. This avoids infinitely nested objects.  in the case of a pointer (or reference), the compiler does not actually need to know the details of the type until operations are invoked through the pointer (or reference).